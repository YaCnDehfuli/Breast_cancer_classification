# -*- coding: utf-8 -*-
"""Cancer

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19yWJyhSMY8d0YPrT5lWk084eftsPyrW0
"""

import numpy as np
import pandas as pd
from sklearn.datasets import load_breast_cancer
class perceptron:

  def __init__(self,input,target,alpha):
      self.input=input
      self.target=target
      self.weight=np.zeros(self.input.shape[1])         #a row of zeros as first values for weights 
      self.bias = 0.1
      self.alpha=0.0000001
    
   
  def hard(self,z):                                  #defining hardlimit function  
    if(z > 0.7):
      return 1
    else:
      return 0    


  def fit(self):
    it=0
    for i in range(1000):                             #1000 is the number of epochs
      if(self.wrongs() !=0):
        it+=1
        for k in range(self.input.shape[0]):
          j = np.random.randint(0, len(self.input))
          e = self.target[j]-(self.weight.T.dot(self.input[j]) + self.bias)  
          if(np.abs(e) > 0.01):
            self.weight = self.weight + (e * self.alpha * self.input[j])       #updating the weights    
            self.bias = self.bias + (e * self.alpha)                           #updating the bias
    print(str(it)+'  iteration was needed')

 
  def predict(self,input):
    o=[]
    for i in range(self.input.shape[0]):
      s = (self.weight.T.dot(self.input[i]) + self.bias)
      o.append(self.hard(s))
      print(str(o[i]) +'  is predicted for target of :  ' + str(self.target[i]))   #changing the array types for printing 
    return 
 

 
  def wrongs(self):          
    wrongs = 0
    for i in range(self.input.shape[0]):
      if((self.hard(self.weight.T.dot(self.input[i]) + self.bias)) != self.target[i]):
        wrongs+=1                                                                #number of the wrong predcitions
    return wrongs


x = load_breast_cancer().data
y = load_breast_cancer().target[:, np.newaxis]
slp = perceptron(x,y,0.00000001)
slp.fit()
slp.predict(x)
print('number of wrong predictions :  ' +str(slp.wrongs()))